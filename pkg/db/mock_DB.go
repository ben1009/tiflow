//  Copyright 2022 PingCAP, Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package db

import mock "github.com/stretchr/testify/mock"

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

// Batch provides a mock function with given fields: cap
func (_m *MockDB) Batch(cap int) Batch {
	ret := _m.Called(cap)

	var r0 Batch
	if rf, ok := ret.Get(0).(func(int) Batch); ok {
		r0 = rf(cap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Batch)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockDB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectMetrics provides a mock function with given fields: id
func (_m *MockDB) CollectMetrics(id int) {
	_m.Called(id)
}

// Compact provides a mock function with given fields: start, end
func (_m *MockDB) Compact(start []byte, end []byte) error {
	ret := _m.Called(start, end)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRange provides a mock function with given fields: start, end
func (_m *MockDB) DeleteRange(start []byte, end []byte) error {
	ret := _m.Called(start, end)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Iterator provides a mock function with given fields: lowerBound, upperBound
func (_m *MockDB) Iterator(lowerBound []byte, upperBound []byte) Iterator {
	ret := _m.Called(lowerBound, upperBound)

	var r0 Iterator
	if rf, ok := ret.Get(0).(func([]byte, []byte) Iterator); ok {
		r0 = rf(lowerBound, upperBound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Iterator)
		}
	}

	return r0
}
