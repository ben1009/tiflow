//  Copyright 2022 PingCAP, Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package db

import mock "github.com/stretchr/testify/mock"

// MockBatch is an autogenerated mock type for the Batch type
type MockBatch struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *MockBatch) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields:
func (_m *MockBatch) Count() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// Delete provides a mock function with given fields: key
func (_m *MockBatch) Delete(key []byte) {
	_m.Called(key)
}

// Put provides a mock function with given fields: key, value
func (_m *MockBatch) Put(key []byte, value []byte) {
	_m.Called(key, value)
}

// Repr provides a mock function with given fields:
func (_m *MockBatch) Repr() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *MockBatch) Reset() {
	_m.Called()
}
