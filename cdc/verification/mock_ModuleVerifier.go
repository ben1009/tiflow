//  Copyright 2022 PingCAP, Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package verification

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockModuleVerifier is an autogenerated mock type for the ModuleVerifier type
type MockModuleVerifier struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockModuleVerifier) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GC provides a mock function with given fields: endTs
func (_m *MockModuleVerifier) GC(endTs string) error {
	ret := _m.Called(endTs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(endTs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SentTrackData provides a mock function with given fields: ctx, module, data
func (_m *MockModuleVerifier) SentTrackData(ctx context.Context, module Module, data []TrackData) {
	_m.Called(ctx, module, data)
}

// Verify provides a mock function with given fields: ctx, startTs, endTs
func (_m *MockModuleVerifier) Verify(ctx context.Context, startTs string, endTs string) error {
	ret := _m.Called(ctx, startTs, endTs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, startTs, endTs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
